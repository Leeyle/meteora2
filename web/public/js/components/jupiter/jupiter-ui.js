/**
 * ü™ê Jupiter‰∫§Êç¢UIÁïåÈù¢
 * Êèê‰æõJupiter‰∫§Êç¢ÁöÑÁî®Êà∑ÁïåÈù¢ÁªÑ‰ª∂
 */

class JupiterUI {
    constructor() {
        this.container = null;
        this.initialized = false;
    }

    /**
     * ÂàùÂßãÂåñUIÁïåÈù¢
     * @param {HTMLElement} container ÂÆπÂô®ÂÖÉÁ¥†
     */
    init(container) {
        this.container = container;
        this.render();
        this.bindEvents();
        this.initialized = true;
        console.log('Jupiter UIÂàùÂßãÂåñÂÆåÊàê');
    }

    /**
     * Ê∏≤Êüì‰∏ªÁïåÈù¢
     */
    render() {
        if (!this.container) return;

        this.container.innerHTML = `
            <div class="jupiter-container">
                <!-- ‰∫§Êç¢Ë°®ÂçïÂç°Áâá -->
                <div class="jupiter-card swap-card">
                    <div class="card-header">
                        <h3>ü™ê ‰ª£Â∏Å‰∫§Êç¢</h3>
                        <div class="swap-settings">
                            <div class="status-indicator" id="connectionStatus">
                                <span class="status-dot"></span>
                                <span class="status-text">ÂáÜÂ§áÂ∞±Áª™</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card-content">
                        <div class="swap-form">
                            <!-- ËæìÂÖ•‰ª£Â∏Å -->
                            <div class="token-input-group">
                                <div class="input-header">
                                    <label>ÂèëÈÄÅ</label>
                                    <div class="balance-info" id="inputBalance">
                                        <span class="balance-text">‰ΩôÈ¢ù: --</span>
                                        <button class="max-btn" id="maxBtn">MAX</button>
                                    </div>
                                </div>
                                <div class="token-input-container">
                                    <div class="amount-input-wrapper">
                                        <input 
                                            type="text" 
                                            id="inputAmount" 
                                            class="token-amount-input" 
                                            placeholder="0.00"
                                            autocomplete="off"
                                        >
                                        <div class="input-suffix">
                                            <span class="token-symbol" id="inputTokenSymbol">ÈÄâÊã©‰ª£Â∏Å</span>
                                        </div>
                                    </div>
                                    <div class="token-select-wrapper">
                                        <input 
                                            type="text" 
                                            id="inputTokenAddress" 
                                            class="token-address-input" 
                                            placeholder="ËæìÂÖ•‰ª£Â∏ÅÂú∞ÂùÄÊàñÊêúÁ¥¢"
                                            autocomplete="off"
                                        >
                                        <div class="token-shortcuts">
                                            <button class="token-btn" data-token="SOL" data-target="input" title="Solana">
                                                <span class="token-icon">‚óâ</span>
                                                <span>SOL</span>
                                            </button>
                                            <button class="token-btn" data-token="USDC" data-target="input" title="USD Coin">
                                                <span class="token-icon">üíµ</span>
                                                <span>USDC</span>
                                            </button>
                                            <button class="token-btn" data-token="USDT" data-target="input" title="Tether">
                                                <span class="token-icon">üí¥</span>
                                                <span>USDT</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="token-value" id="inputTokenValue">
                                    <span class="usd-value">‚âà $0.00</span>
                                </div>
                            </div>

                            <!-- ‰∫§Êç¢ÊñπÂêëÊåâÈíÆ -->
                            <div class="swap-direction">
                                <button class="swap-direction-btn" id="swapDirectionBtn" title="‰∫§Êç¢ÊñπÂêë">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M7 10l5 5 5-5z"/>
                                        <path d="M7 14l5-5 5 5z"/>
                                    </svg>
                                </button>
                            </div>

                            <!-- ËæìÂá∫‰ª£Â∏Å -->
                            <div class="token-input-group">
                                <div class="input-header">
                                    <label>Êé•Êî∂</label>
                                    <div class="balance-info" id="outputBalance">
                                        <span class="balance-text">‰ΩôÈ¢ù: --</span>
                                    </div>
                                </div>
                                <div class="token-input-container">
                                    <div class="amount-input-wrapper">
                                        <input 
                                            type="text" 
                                            id="outputAmount" 
                                            class="token-amount-input output-readonly" 
                                            placeholder="0.00"
                                            readonly
                                        >
                                        <div class="input-suffix">
                                            <span class="token-symbol" id="outputTokenSymbol">ÈÄâÊã©‰ª£Â∏Å</span>
                                        </div>
                                    </div>
                                    <div class="token-select-wrapper">
                                        <input 
                                            type="text" 
                                            id="outputTokenAddress" 
                                            class="token-address-input" 
                                            placeholder="ËæìÂÖ•‰ª£Â∏ÅÂú∞ÂùÄÊàñÊêúÁ¥¢"
                                            autocomplete="off"
                                        >
                                        <div class="token-shortcuts">
                                            <button class="token-btn" data-token="USDC" data-target="output" title="USD Coin">
                                                <span class="token-icon">üíµ</span>
                                                <span>USDC</span>
                                            </button>
                                            <button class="token-btn" data-token="USDT" data-target="output" title="Tether">
                                                <span class="token-icon">üí¥</span>
                                                <span>USDT</span>
                                            </button>
                                            <button class="token-btn" data-token="SOL" data-target="output" title="Solana">
                                                <span class="token-icon">‚óâ</span>
                                                <span>SOL</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="token-value" id="outputTokenValue">
                                    <span class="usd-value">‚âà $0.00</span>
                                </div>
                            </div>

                            <!-- È´òÁ∫ßËÆæÁΩÆ -->
                            <div class="advanced-settings">
                                <div class="settings-toggle" id="advancedToggle">
                                    <span>È´òÁ∫ßËÆæÁΩÆ</span>
                                    <svg class="toggle-icon" width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M7 10l5 5 5-5z"/>
                                    </svg>
                                </div>
                                <div class="settings-content" id="advancedContent" style="display: none;">
                                    <div class="setting-row">
                                        <label>ÊªëÁÇπÂÆπÂøçÂ∫¶ (%)</label>
                                        <div class="slippage-controls">
                                            <button class="slippage-preset" data-slippage="0.1">0.1%</button>
                                            <button class="slippage-preset" data-slippage="0.5">0.5%</button>
                                            <button class="slippage-preset active" data-slippage="1">1%</button>
                                            <input 
                                                type="number" 
                                                id="slippageInput" 
                                                value="1" 
                                                min="0.01" 
                                                max="50" 
                                                step="0.01"
                                                class="slippage-custom"
                                                placeholder="Ëá™ÂÆö‰πâ"
                                            >
                                        </div>
                                    </div>
                                    <div class="setting-row">
                                        <label>‰∫§Êòì‰ºòÂÖàÁ∫ß</label>
                                        <select id="prioritySelect" class="priority-select">
                                            <option value="low">‰Ωé (ËäÇÁúÅË¥πÁî®)</option>
                                            <option value="medium" selected>‰∏≠ (Êé®Ëçê)</option>
                                            <option value="high">È´ò (Âø´ÈÄüÁ°ÆËÆ§)</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <!-- Ë∑ØÁî±‰ø°ÊÅØ -->
                            <div class="route-info" id="routeInfo" style="display: none;">
                                <div class="route-header">
                                    <span class="route-title">üõ£Ô∏è ‰∫§Êç¢Ë∑ØÁî±</span>
                                    <span class="route-badge" id="routeBadge">ÊúÄ‰Ω≥</span>
                                </div>
                                <div class="route-details" id="routeDetails">
                                    <!-- Ë∑ØÁî±ËØ¶ÊÉÖÂ∞ÜÂä®ÊÄÅÂ°´ÂÖÖ -->
                                </div>
                                <div class="route-metrics">
                                    <div class="metric">
                                        <span class="metric-label">È¢ÑËÆ°ËæìÂá∫</span>
                                        <span class="metric-value" id="estimatedOutput">--</span>
                                    </div>
                                    <div class="metric">
                                        <span class="metric-label">‰ª∑Ê†ºÂΩ±Âìç</span>
                                        <span class="metric-value price-impact" id="priceImpact">--</span>
                                    </div>
                                    <div class="metric">
                                        <span class="metric-label">ÊúÄÂ∞èÊé•Êî∂</span>
                                        <span class="metric-value" id="minimumReceived">--</span>
                                    </div>
                                    <div class="metric">
                                        <span class="metric-label">ÁΩëÁªúË¥πÁî®</span>
                                        <span class="metric-value" id="networkFee">~0.000005 SOL</span>
                                    </div>
                                </div>
                            </div>

                            <!-- ‰∫§Êç¢ÊåâÈíÆ -->
                            <div class="swap-actions">
                                <button class="btn btn-primary btn-large" id="getQuoteBtn">
                                    <span class="btn-text">Ëé∑ÂèñÊúÄ‰Ω≥Êä•‰ª∑</span>
                                    <div class="btn-spinner" style="display: none;">
                                        <div class="spinner"></div>
                                    </div>
                                </button>
                                <button class="btn btn-success btn-large" id="swapBtn" style="display: none;">
                                    <span class="btn-text">Á°ÆËÆ§‰∫§Êç¢</span>
                                    <div class="btn-spinner" style="display: none;">
                                        <div class="spinner"></div>
                                    </div>
                                </button>
                            </div>

                            <!-- Ë≠¶ÂëäÊèêÁ§∫ -->
                            <div class="warning-message" id="warningMessage" style="display: none;">
                                <div class="warning-icon">‚ö†Ô∏è</div>
                                <div class="warning-text"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Â∏ÇÂú∫‰ø°ÊÅØÂç°Áâá -->
                <div class="jupiter-card market-card">
                    <div class="card-header">
                        <h3>üìä Â∏ÇÂú∫‰ø°ÊÅØ</h3>
                        <div class="refresh-indicator" id="marketRefresh">
                            <span class="refresh-time">--</span>
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="market-grid">
                            <div class="market-item">
                                <div class="market-label">JupiterÁä∂ÊÄÅ</div>
                                <div class="market-value" id="jupiterStatus">
                                    <span class="status-indicator">
                                        <span class="status-dot"></span>
                                        <span class="status-text">Ê≠£Â∏∏</span>
                                    </span>
                                </div>
                            </div>
                            <div class="market-item">
                                <div class="market-label">ÊîØÊåÅ‰ª£Â∏Å</div>
                                <div class="market-value" id="supportedTokensCount">--</div>
                            </div>
                            <div class="market-item">
                                <div class="market-label">24h‰∫§ÊòìÈáè</div>
                                <div class="market-value" id="dailyVolume">--</div>
                            </div>
                            <div class="market-item">
                                <div class="market-label">ÁΩëÁªúÊã•Â†µ</div>
                                <div class="market-value" id="networkCongestion">
                                    <span class="congestion-indicator">Ê≠£Â∏∏</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- ‰∫§Êç¢ÂéÜÂè≤ -->
                <div class="jupiter-card history-card">
                    <div class="card-header">
                        <h3>üìã ‰∫§Êç¢ÂéÜÂè≤</h3>
                        <button class="btn btn-sm" id="clearHistoryBtn">Ê∏ÖÁ©∫</button>
                    </div>
                    <div class="card-content">
                        <div class="swap-history" id="swapHistory">
                            <div class="empty-state">
                                <div class="empty-icon">üìù</div>
                                <div class="empty-text">ÊöÇÊó†‰∫§Êç¢ËÆ∞ÂΩï</div>
                                <div class="empty-subtext">ÂÆåÊàê‰∫§Êç¢ÂêéÂ∞ÜÊòæÁ§∫ÂéÜÂè≤ËÆ∞ÂΩï</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        console.log('Jupiter UIÊ∏≤ÊüìÂÆåÊàê');

        // üîß ‰øÆÂ§çÔºöËÆæÁΩÆÂàùÂßãÁä∂ÊÄÅÊåáÁ§∫Âô®È¢úËâ≤
        this.setInitialStatus();
    }

    /**
     * ËÆæÁΩÆÂàùÂßãÁä∂ÊÄÅ
     */
    setInitialStatus() {
        // ËÆæÁΩÆËøûÊé•Áä∂ÊÄÅÊåáÁ§∫Âô®‰∏∫ÁªøËâ≤ÔºàÂáÜÂ§áÂ∞±Áª™Ôºâ
        const connectionStatusDot = this.container.querySelector('#connectionStatus .status-dot');
        if (connectionStatusDot) {
            connectionStatusDot.style.background = '#10b981';
        }

        // ËÆæÁΩÆJupiterÁä∂ÊÄÅÊåáÁ§∫Âô®‰∏∫ÁªøËâ≤ÔºàÊ≠£Â∏∏Ôºâ
        const jupiterStatusDot = this.container.querySelector('#jupiterStatus .status-dot');
        if (jupiterStatusDot) {
            jupiterStatusDot.style.background = '#10b981';
        }

        // ËÆæÁΩÆÊîØÊåÅ‰ª£Â∏ÅÊï∞Èáè
        const supportedTokensCount = this.container.querySelector('#supportedTokensCount');
        if (supportedTokensCount) {
            supportedTokensCount.textContent = '1000+';
        }
    }

    /**
     * ÁªëÂÆö‰∫ã‰ª∂
     */
    bindEvents() {
        if (!this.container) return;

        // ‰∫§Êç¢ÊñπÂêëÊåâÈíÆ
        const swapDirectionBtn = this.container.querySelector('#swapDirectionBtn');
        swapDirectionBtn?.addEventListener('click', () => this.swapDirection());

        // Ëé∑ÂèñÊä•‰ª∑ÊåâÈíÆ
        const getQuoteBtn = this.container.querySelector('#getQuoteBtn');
        getQuoteBtn?.addEventListener('click', () => this.getQuote());

        // ‰∫§Êç¢ÊåâÈíÆ
        const swapBtn = this.container.querySelector('#swapBtn');
        swapBtn?.addEventListener('click', () => this.executeSwap());

        // Ê∏ÖÁ©∫ÂéÜÂè≤ÊåâÈíÆ
        const clearHistoryBtn = this.container.querySelector('#clearHistoryBtn');
        clearHistoryBtn?.addEventListener('click', () => this.clearHistory());

        // MAXÊåâÈíÆ
        const maxBtn = this.container.querySelector('#maxBtn');
        maxBtn?.addEventListener('click', () => this.setMaxAmount());

        // È´òÁ∫ßËÆæÁΩÆÂàáÊç¢
        const advancedToggle = this.container.querySelector('#advancedToggle');
        advancedToggle?.addEventListener('click', () => this.toggleAdvancedSettings());

        // ÊªëÁÇπÈ¢ÑËÆæÊåâÈíÆ
        const slippagePresets = this.container.querySelectorAll('.slippage-preset');
        slippagePresets.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const slippage = e.target.dataset.slippage;
                this.setSlippage(slippage);
            });
        });

        // ‰ª£Â∏ÅÂø´Êç∑ÊåâÈíÆ
        const tokenShortcuts = this.container.querySelectorAll('.token-btn');
        tokenShortcuts.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const token = e.currentTarget.dataset.token;
                const target = e.currentTarget.dataset.target;
                if (token && target) {
                    this.fillTokenAddress(token, target);
                }
            });
        });

        // ËæìÂÖ•ÈáëÈ¢ùÂèòÂåñ‰∫ã‰ª∂
        const inputAmount = this.container.querySelector('#inputAmount');
        inputAmount?.addEventListener('input', () => this.onAmountChange());

        // ‰ª£Â∏ÅÂú∞ÂùÄÂèòÂåñ‰∫ã‰ª∂
        const inputTokenAddress = this.container.querySelector('#inputTokenAddress');
        const outputTokenAddress = this.container.querySelector('#outputTokenAddress');

        inputTokenAddress?.addEventListener('change', () => this.onTokenChange('input'));
        outputTokenAddress?.addEventListener('change', () => this.onTokenChange('output'));

        // Ëá™Âä®Ëé∑ÂèñÊä•‰ª∑ÔºàËæìÂÖ•ÈáëÈ¢ùÊàñ‰ª£Â∏ÅÂèòÂåñÊó∂Ôºâ
        let quoteTimeout;
        const autoQuote = () => {
            clearTimeout(quoteTimeout);
            quoteTimeout = setTimeout(() => {
                if (this.shouldAutoQuote()) {
                    this.getQuote();
                }
            }, 1000); // 1ÁßíÂª∂ËøüÔºåÈÅøÂÖçÈ¢ëÁπÅËØ∑Ê±Ç
        };

        inputAmount?.addEventListener('input', autoQuote);
        inputTokenAddress?.addEventListener('change', autoQuote);
        outputTokenAddress?.addEventListener('change', autoQuote);

        console.log('Jupiter UI‰∫ã‰ª∂ÁªëÂÆöÂÆåÊàê');
    }

    /**
     * ËÆæÁΩÆÊúÄÂ§ßÈáëÈ¢ù
     */
    setMaxAmount() {
        // ËøôÈáåÈúÄË¶Å‰ªéÈí±ÂåÖËé∑Âèñ‰ΩôÈ¢ùÔºåÊöÇÊó∂ËÆæÁΩÆ‰∏∫Á§∫‰æãÂÄº
        const inputAmount = this.container.querySelector('#inputAmount');
        if (inputAmount) {
            inputAmount.value = '100'; // Á§∫‰æãÂÄºÔºåÂÆûÈôÖÂ∫î‰ªéÈí±ÂåÖËé∑Âèñ
            this.onAmountChange();
        }
    }

    /**
     * ÂàáÊç¢È´òÁ∫ßËÆæÁΩÆ
     */
    toggleAdvancedSettings() {
        const content = this.container.querySelector('#advancedContent');
        const toggle = this.container.querySelector('#advancedToggle');
        const icon = toggle?.querySelector('.toggle-icon');

        if (content && toggle) {
            const isVisible = content.style.display !== 'none';
            content.style.display = isVisible ? 'none' : 'block';

            if (icon) {
                icon.style.transform = isVisible ? 'rotate(0deg)' : 'rotate(180deg)';
            }
        }
    }

    /**
     * ËÆæÁΩÆÊªëÁÇπ
     */
    setSlippage(slippage) {
        const slippageInput = this.container.querySelector('#slippageInput');
        const presets = this.container.querySelectorAll('.slippage-preset');

        if (slippageInput) {
            slippageInput.value = slippage;
        }

        // Êõ¥Êñ∞È¢ÑËÆæÊåâÈíÆÁä∂ÊÄÅ
        presets.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.slippage === slippage);
        });
    }

    /**
     * ÈáëÈ¢ùÂèòÂåñÂ§ÑÁêÜ
     */
    onAmountChange() {
        const inputAmount = this.container.querySelector('#inputAmount');
        const inputValue = this.container.querySelector('#inputTokenValue .usd-value');

        if (inputAmount && inputValue) {
            const amount = parseFloat(inputAmount.value) || 0;
            // ËøôÈáåÂ∫îËØ•Ê†πÊçÆÂÆûÈôÖ‰ª£Â∏Å‰ª∑Ê†ºËÆ°ÁÆóUSD‰ª∑ÂÄº
            inputValue.textContent = `‚âà $${(amount * 100).toFixed(2)}`; // Á§∫‰æãËÆ°ÁÆó
        }
    }

    /**
     * ‰ª£Â∏ÅÂèòÂåñÂ§ÑÁêÜ
     */
    onTokenChange(type) {
        const addressInput = this.container.querySelector(`#${type}TokenAddress`);
        const symbolSpan = this.container.querySelector(`#${type}TokenSymbol`);

        if (addressInput && symbolSpan) {
            const address = addressInput.value;
            if (address) {
                // Ê†πÊçÆÂú∞ÂùÄËé∑Âèñ‰ª£Â∏ÅÁ¨¶Âè∑
                const symbol = this.getTokenSymbolByAddress(address);
                symbolSpan.textContent = symbol || 'Êú™Áü•‰ª£Â∏Å';
            } else {
                symbolSpan.textContent = 'ÈÄâÊã©‰ª£Â∏Å';
            }
        }
    }

    /**
     * Ê†πÊçÆÂú∞ÂùÄËé∑Âèñ‰ª£Â∏ÅÁ¨¶Âè∑
     */
    getTokenSymbolByAddress(address) {
        const tokenMap = {
            'So11111111111111111111111111111111111111112': 'SOL',
            'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v': 'USDC',
            'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB': 'USDT',
            '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R': 'RAY'
        };
        return tokenMap[address];
    }

    /**
     * Ê£ÄÊü•ÊòØÂê¶Â∫îËØ•Ëá™Âä®Ëé∑ÂèñÊä•‰ª∑
     */
    shouldAutoQuote() {
        const inputAmount = this.container.querySelector('#inputAmount');
        const inputAddress = this.container.querySelector('#inputTokenAddress');
        const outputAddress = this.container.querySelector('#outputTokenAddress');

        return inputAmount?.value &&
            inputAddress?.value &&
            outputAddress?.value &&
            parseFloat(inputAmount.value) > 0;
    }

    /**
     * ‰∫§Êç¢ËæìÂÖ•ËæìÂá∫‰ª£Â∏Å
     */
    swapDirection() {
        const inputAddress = this.container.querySelector('#inputTokenAddress');
        const outputAddress = this.container.querySelector('#outputTokenAddress');
        const inputAmount = this.container.querySelector('#inputAmount');
        const outputAmount = this.container.querySelector('#outputAmount');

        if (inputAddress && outputAddress && inputAmount && outputAmount) {
            // ‰∫§Êç¢Âú∞ÂùÄ
            const tempAddress = inputAddress.value;
            inputAddress.value = outputAddress.value;
            outputAddress.value = tempAddress;

            // Ê∏ÖÁ©∫ÈáëÈ¢ù
            inputAmount.value = '';
            outputAmount.value = '';

            // ÈöêËóè‰∫§Êç¢‰ø°ÊÅØ
            this.hideSwapInfo();
        }
    }

    /**
     * Ëé∑ÂèñÊä•‰ª∑
     */
    getQuote() {
        this.container.dispatchEvent(new CustomEvent('jupiterGetQuote'));
    }

    /**
     * ÊâßË°å‰∫§Êç¢
     */
    executeSwap() {
        this.container.dispatchEvent(new CustomEvent('jupiterExecuteSwap'));
    }

    /**
     * Âà∑Êñ∞Áä∂ÊÄÅ
     */
    refreshStatus() {
        this.container.dispatchEvent(new CustomEvent('jupiterRefreshStatus'));
    }

    /**
     * Ê∏ÖÁ©∫ÂéÜÂè≤
     */
    clearHistory() {
        const historyContainer = this.container.querySelector('#swapHistory');
        if (historyContainer) {
            historyContainer.innerHTML = `
                <div class="empty-state">
                    <div class="empty-text">ÊöÇÊó†‰∫§Êç¢ËÆ∞ÂΩï</div>
                </div>
            `;
        }
    }

    /**
     * ÊòæÁ§∫‰∫§Êç¢‰ø°ÊÅØ
     * @param {Object} quote Êä•‰ª∑‰ø°ÊÅØ
     * @param {number} outputDecimals ËæìÂá∫‰ª£Â∏ÅÁ≤æÂ∫¶
     */
    showSwapInfo(quote, outputDecimals = 9) {
        try {
            console.log('ÊòæÁ§∫‰∫§Êç¢‰ø°ÊÅØ:', quote);

            const routeInfo = this.container.querySelector('#routeInfo');
            const estimatedOutput = this.container.querySelector('#estimatedOutput');
            const priceImpact = this.container.querySelector('#priceImpact');
            const minimumReceived = this.container.querySelector('#minimumReceived');
            const routeDetails = this.container.querySelector('#routeDetails');
            const swapBtn = this.container.querySelector('#swapBtn');

            if (!routeInfo || !estimatedOutput || !priceImpact) {
                console.error('‰∫§Êç¢‰ø°ÊÅØDOMÂÖÉÁ¥†Êú™ÊâæÂà∞');
                return;
            }

            if (!quote || !quote.outAmount) {
                console.error('Êä•‰ª∑Êï∞ÊçÆÊó†Êïà:', quote);
                return;
            }

            // üîß ‰øÆÂ§çÔºö‰ΩøÁî®Âä®ÊÄÅËé∑ÂèñÁöÑËæìÂá∫‰ª£Â∏ÅÁ≤æÂ∫¶Ê†ºÂºèÂåñËæìÂá∫Êï∞Èáè
            try {
                // ‰ΩøÁî®‰º†ÂÖ•ÁöÑÁ≤æÂ∫¶ÂèÇÊï∞ÔºåËÄå‰∏çÊòØÁ°¨ÁºñÁ†ÅÁöÑ9
                const outputAmount = parseFloat(quote.outAmount) / Math.pow(10, outputDecimals);
                if (!isNaN(outputAmount) && isFinite(outputAmount)) {
                    // Ê†πÊçÆÊï∞ÂÄºÂ§ßÂ∞èÈÄâÊã©ÂêàÈÄÇÁöÑÊòæÁ§∫Á≤æÂ∫¶
                    let displayAmount;
                    if (outputAmount >= 1) {
                        displayAmount = outputAmount.toFixed(6);
                    } else if (outputAmount >= 0.001) {
                        displayAmount = outputAmount.toFixed(8);
                    } else if (outputAmount > 0) {
                        displayAmount = outputAmount.toExponential(3);
                    } else {
                        displayAmount = '0';
                    }
                    estimatedOutput.textContent = displayAmount;

                    // ËÆ°ÁÆóÊúÄÂ∞èÊé•Êî∂ÈáëÈ¢ùÔºàËÄÉËôëÊªëÁÇπÔºâ
                    const slippageInput = this.container.querySelector('#slippageInput');
                    const slippage = parseFloat(slippageInput?.value || 1) / 100;
                    const minReceived = outputAmount * (1 - slippage);
                    if (minimumReceived) {
                        minimumReceived.textContent = minReceived.toFixed(6);
                    }

                    console.log(`üí∞ ÊòæÁ§∫ËæìÂá∫ÈáëÈ¢ù: ${displayAmount} (Á≤æÂ∫¶: ${outputDecimals})`);
                } else {
                    estimatedOutput.textContent = '0.000000';
                    if (minimumReceived) minimumReceived.textContent = '0.000000';
                    console.warn('ËæìÂá∫ÈáëÈ¢ùËÆ°ÁÆóÂºÇÂ∏∏:', quote.outAmount);
                }
            } catch (outputError) {
                console.error('ËÆæÁΩÆÈ¢Ñ‰º∞ËæìÂá∫Â§±Ë¥•:', outputError);
                estimatedOutput.textContent = '0.000000';
                if (minimumReceived) minimumReceived.textContent = '0.000000';
            }

            // Ê†ºÂºèÂåñ‰ª∑Ê†ºÂΩ±Âìç - ÂÆâÂÖ®Â§ÑÁêÜ
            try {
                const impact = Math.abs(quote.priceImpactPct || 0) * 100;
                if (!isNaN(impact) && isFinite(impact)) {
                    priceImpact.textContent = `${impact.toFixed(2)}%`;

                    // ËÆæÁΩÆ‰ª∑Ê†ºÂΩ±ÂìçÈ¢úËâ≤
                    priceImpact.className = 'metric-value price-impact';
                    if (impact < 0.1) {
                        priceImpact.classList.add('low');
                    } else if (impact < 1) {
                        priceImpact.classList.add('medium');
                    } else {
                        priceImpact.classList.add('high');
                    }
                } else {
                    priceImpact.textContent = '0.00%';
                    priceImpact.className = 'metric-value price-impact low';
                }
            } catch (impactError) {
                console.error('ËÆæÁΩÆ‰ª∑Ê†ºÂΩ±ÂìçÂ§±Ë¥•:', impactError);
                priceImpact.textContent = '0.00%';
                priceImpact.className = 'metric-value price-impact low';
            }

            // ÊòæÁ§∫Ë∑ØÁî±‰ø°ÊÅØ
            if (routeDetails && quote.routePlan) {
                this.displayRouteDetails(quote.routePlan, routeDetails);
            }

            // ÊòæÁ§∫Ë≠¶Âëä‰ø°ÊÅØ
            this.showWarnings(quote);

            // ÊòæÁ§∫UIÂÖÉÁ¥†
            routeInfo.style.display = 'block';
            if (swapBtn) swapBtn.style.display = 'block';

            console.log('‰∫§Êç¢‰ø°ÊÅØÊòæÁ§∫ÂÆåÊàê');
        } catch (error) {
            console.error('ÊòæÁ§∫‰∫§Êç¢‰ø°ÊÅØÂ§±Ë¥•:', error);
        }
    }

    /**
     * ÊòæÁ§∫Ë∑ØÁî±ËØ¶ÊÉÖ
     */
    displayRouteDetails(routePlan, container) {
        if (!routePlan || !container) return;

        try {
            let routeHTML = '<div class="route-path">';

            // ÁÆÄÂåñÁöÑË∑ØÁî±ÊòæÁ§∫
            if (routePlan.length === 1) {
                routeHTML += `
                    <div class="route-step">
                        <span class="route-dex">${routePlan[0].swapInfo?.label || 'DEX'}</span>
                        <span class="route-arrow">‚Üí</span>
                    </div>
                `;
            } else {
                routeHTML += `
                    <div class="route-step">
                        <span class="route-text">${routePlan.length} Ê≠•‰∫§Êç¢</span>
                    </div>
                `;
            }

            routeHTML += '</div>';
            container.innerHTML = routeHTML;
        } catch (error) {
            console.error('ÊòæÁ§∫Ë∑ØÁî±ËØ¶ÊÉÖÂ§±Ë¥•:', error);
            container.innerHTML = '<div class="route-error">Ë∑ØÁî±‰ø°ÊÅØÂä†ËΩΩÂ§±Ë¥•</div>';
        }
    }

    /**
     * ÊòæÁ§∫Ë≠¶Âëä‰ø°ÊÅØ
     */
    showWarnings(quote) {
        const warningMessage = this.container.querySelector('#warningMessage');
        if (!warningMessage) return;

        const warnings = [];

        // Ê£ÄÊü•‰ª∑Ê†ºÂΩ±Âìç
        const impact = Math.abs(quote.priceImpactPct || 0) * 100;
        if (impact > 5) {
            warnings.push(`È´ò‰ª∑Ê†ºÂΩ±Âìç (${impact.toFixed(2)}%)`);
        }

        // Ê£ÄÊü•ÊªëÁÇπËÆæÁΩÆ
        const slippageInput = this.container.querySelector('#slippageInput');
        const slippage = parseFloat(slippageInput?.value || 1);
        if (slippage > 5) {
            warnings.push(`È´òÊªëÁÇπËÆæÁΩÆ (${slippage}%)`);
        }

        if (warnings.length > 0) {
            const warningText = warningMessage.querySelector('.warning-text');
            if (warningText) {
                warningText.textContent = warnings.join(', ');
            }
            warningMessage.style.display = 'flex';
        } else {
            warningMessage.style.display = 'none';
        }
    }

    /**
     * ÈöêËóè‰∫§Êç¢‰ø°ÊÅØ
     */
    hideSwapInfo() {
        const routeInfo = this.container.querySelector('#routeInfo');
        const swapBtn = this.container.querySelector('#swapBtn');
        const warningMessage = this.container.querySelector('#warningMessage');

        if (routeInfo) routeInfo.style.display = 'none';
        if (swapBtn) swapBtn.style.display = 'none';
        if (warningMessage) warningMessage.style.display = 'none';
    }

    /**
     * ËÆæÁΩÆÊåâÈíÆÂä†ËΩΩÁä∂ÊÄÅ
     * @param {string} buttonId ÊåâÈíÆID
     * @param {boolean} loading ÊòØÂê¶Âä†ËΩΩ‰∏≠
     */
    setButtonLoading(buttonId, loading) {
        const button = this.container.querySelector(`#${buttonId}`);
        const btnText = button?.querySelector('.btn-text');
        const btnSpinner = button?.querySelector('.btn-spinner');

        if (loading) {
            button?.setAttribute('disabled', 'true');
            if (btnText) btnText.style.display = 'none';
            if (btnSpinner) btnSpinner.style.display = 'flex';
        } else {
            button?.removeAttribute('disabled');
            if (btnText) btnText.style.display = 'inline';
            if (btnSpinner) btnSpinner.style.display = 'none';
        }
    }

    /**
     * Êõ¥Êñ∞Áä∂ÊÄÅ‰ø°ÊÅØ
     * @param {Object} status Áä∂ÊÄÅ‰ø°ÊÅØ
     */
    updateStatus(status) {
        const jupiterStatus = this.container.querySelector('#jupiterStatus .status-text');
        const jupiterStatusDot = this.container.querySelector('#jupiterStatus .status-dot');
        const supportedTokensCount = this.container.querySelector('#supportedTokensCount');

        if (jupiterStatus) {
            jupiterStatus.textContent = status.status === 'healthy' ? 'Ê≠£Â∏∏' : 'ÂºÇÂ∏∏';
        }

        // üîß ‰øÆÂ§çÔºöÊõ¥Êñ∞Áä∂ÊÄÅÊåáÁ§∫Âô®È¢úËâ≤
        if (jupiterStatusDot) {
            jupiterStatusDot.style.background = status.status === 'healthy' ? '#10b981' : '#ef4444';
        }

        if (supportedTokensCount) {
            supportedTokensCount.textContent = status.tokensCount || '1000+';
        }
    }

    /**
     * Ê∑ªÂä†‰∫§Êç¢ÂéÜÂè≤ËÆ∞ÂΩï
     * @param {Object} record ‰∫§Êç¢ËÆ∞ÂΩï
     */
    addSwapHistory(record) {
        const historyContainer = this.container.querySelector('#swapHistory');
        if (!historyContainer) return;

        // ÁßªÈô§Á©∫Áä∂ÊÄÅ
        const emptyState = historyContainer.querySelector('.empty-state');
        if (emptyState) {
            emptyState.remove();
        }

        const historyItem = document.createElement('div');
        historyItem.className = 'history-item';
        historyItem.innerHTML = `
            <div class="history-info">
                <div class="history-tokens">
                    ${record.inputAmount || '0'} ‚Üí ${record.outputAmount || '0'}
                </div>
                <div class="history-time">${new Date().toLocaleString()}</div>
            </div>
            <div class="history-status ${record.success ? 'success' : 'failed'}">
                ${record.success ? '‚úÖ' : '‚ùå'}
            </div>
        `;

        historyContainer.insertBefore(historyItem, historyContainer.firstChild);

        // ÈôêÂà∂ÂéÜÂè≤ËÆ∞ÂΩïÊï∞Èáè
        const items = historyContainer.querySelectorAll('.history-item');
        if (items.length > 10) {
            items[items.length - 1].remove();
        }
    }

    /**
     * Ëé∑ÂèñÂΩìÂâçËæìÂÖ•ÂÄº
     */
    getCurrentInputs() {
        return {
            inputTokenAddress: this.container.querySelector('#inputTokenAddress')?.value || '',
            outputTokenAddress: this.container.querySelector('#outputTokenAddress')?.value || '',
            inputAmount: this.container.querySelector('#inputAmount')?.value || '',
            slippage: parseFloat(this.container.querySelector('#slippageInput')?.value || '0.5')
        };
    }

    /**
     * ËÆæÁΩÆËæìÂá∫ÈáëÈ¢ù
     * @param {string} amount ËæìÂá∫ÈáëÈ¢ù
     */
    setOutputAmount(amount) {
        const outputAmount = this.container.querySelector('#outputAmount');
        if (outputAmount) {
            outputAmount.value = amount;
        }
    }

    /**
     * Â°´ÂÖÖ‰ª£Â∏ÅÂú∞ÂùÄ
     * @param {string} tokenSymbol ‰ª£Â∏ÅÁ¨¶Âè∑
     * @param {string} target ÁõÆÊ†á ('input' Êàñ 'output')
     */
    fillTokenAddress(tokenSymbol, target) {
        const tokenAddresses = {
            'SOL': 'So11111111111111111111111111111111111111112',
            'USDC': 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
            'USDT': 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',
            'RAY': '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R'
        };

        const address = tokenAddresses[tokenSymbol];
        if (!address) return;

        const targetInput = this.container.querySelector(
            target === 'input' ? '#inputTokenAddress' : '#outputTokenAddress'
        );

        if (targetInput) {
            targetInput.value = address;

            // Ëß¶Âèëchange‰∫ã‰ª∂
            targetInput.dispatchEvent(new Event('change', { bubbles: true }));
        }
    }

    /**
     * ÈîÄÊØÅUI
     */
    destroy() {
        if (this.container) {
            this.container.innerHTML = '';
        }
        this.initialized = false;
        console.log('Jupiter UIÂ∑≤ÈîÄÊØÅ');
    }
}

// Êö¥Èú≤Âà∞ÂÖ®Â±Ä‰ΩúÁî®Âüü
window.JupiterUI = JupiterUI; 